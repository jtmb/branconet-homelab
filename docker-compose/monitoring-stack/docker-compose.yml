services:

  prometheus:
    image: prom/prometheus
    user: "0"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    networks:
      - container-swarm-network
    restart: unless-stopped
    volumes:
      - '${container_volumes_location}/prometheus:/etc/prometheus'
      - '${container_volumes_location}/prometheus/prom_data:/prometheus'
    deploy: 
      replicas: 1      

  loki:
    user: "0"
    image: grafana/loki:2.3.0
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - container-swarm-network
    volumes:
      - '${container_volumes_location}/loki/config:/etc/loki'
      - '${container_volumes_location}/loki/data:/data/loki'
    deploy: 
      replicas: 1      

  uptime-kuma:
    image: louislam/uptime-kuma:debian
    ports:
      - 3001:3001
    restart: unless-stopped
    networks:
      - container-swarm-network
    volumes:
      - '${container_volumes_location}/uptime-kuma:/app/data'

  influx:   
    image: influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: root
      DOCKER_INFLUXDB_INIT_PASSWORD: '${ADMIN_PASS}'
      DOCKER_INFLUXDB_INIT_BUCKET: cadvisor
      DOCKER_INFLUXDB_INIT_ORG: monitoring_stack
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: 1234!12345!66781!
      INFLUXDB_USER: root
      INFLUXDB_PASS: '${ADMIN_PASS}'
    networks:
      - container-swarm-network
    ports:
     - 8086:8086   
    volumes:     
      - '${container_volumes_location}/influx:/var/lib/influxdb'
    deploy: 
      replicas: 1      
      placement:
         constraints:
           - node.role == manager

  node-exporter:
    image: flaviostutz/docker-swarm-node-exporter
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    networks:
      - container-swarm-network
    ports:
     - 9100:9100         
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    networks:
      - container-swarm-network
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${ADMIN_PASS}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    user: "0"
    volumes:
      - '${container_volumes_location}/grafana/datasources:/etc/grafana/provisioning/datasources'
      - '${container_volumes_location}/grafana/data:/var/lib/grafana'
networks:
 container-swarm-network:
    external: true