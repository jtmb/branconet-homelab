services:

  prometheus:
    image: prom/prometheus
    user: "0"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9091:9090
    networks:
      - container-swarm-network
    restart: unless-stopped
    volumes:
      - '${container_volumes_location}/prometheus:/etc/prometheus'
      - '${container_volumes_location}/prometheus/prom_data:/prometheus'
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.${domain_name}`)"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090" #uses internal docker port
        - "traefik.http.routers.prometheus.entrypoints=websecure"
        - "traefik.http.routers.prometheus.tls=true"
        - "traefik.http.routers.prometheus.tls.certresolver=myresolver"
        - "traefik.http.routers.prometheus.tls.domains[0].main=prometheus.${domain_name}"
        # to add additional DNS names
        # - "traefik.http.routers.prometheus.tls.domains[0].sans=prometheus.${domain_name}"
      replicas: 1

  loki:
    user: "0"
    image: grafana/loki:2.3.0
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - container-swarm-network
    volumes:
      - '${container_volumes_location}/loki/config:/etc/loki'
      - '${container_volumes_location}/loki/data:/data/loki'
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.loki.rule=Host(`loki.${domain_name}`)"
        - "traefik.http.services.loki.loadbalancer.server.port=3100" #uses internal docker port
        - "traefik.http.routers.loki.entrypoints=websecure"
        - "traefik.http.routers.loki.tls=true"
        - "traefik.http.routers.loki.tls.certresolver=myresolver"
        - "traefik.http.routers.loki.tls.domains[0].main=loki.${domain_name}"
        # to add additional DNS names
        # - "traefik.http.routers.loki.tls.domains[0].sans=loki.${domain_name}"
      replicas: 1

  uptime-kuma:
    image: louislam/uptime-kuma:debian
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.uptime.rule=Host(`uptime.${domain_name}`)"
        - "traefik.http.services.uptime.loadbalancer.server.port=3001" #uses internal docker port
        - "traefik.http.routers.uptime.entrypoints=websecure"
        - "traefik.http.routers.uptime.tls=true"
        - "traefik.http.routers.uptime.tls.certresolver=myresolver"
        - "traefik.http.routers.uptime.tls.domains[0].main=uptime.${domain_name}"
        # to add additional DNS names
        # - "traefik.http.routers.uptime.tls.domains[0].sans=uptime.${domain_name}"
    ports:
      - 3001:3001
    restart: unless-stopped
    networks:
      - container-swarm-network
    volumes:
      - '${container_volumes_location}/uptime-kuma:/app/data'

  # influx:   
  #   image: influxdb
  #   environment:
  #     DOCKER_INFLUXDB_INIT_MODE: setup
  #     DOCKER_INFLUXDB_INIT_USERNAME: root
  #     DOCKER_INFLUXDB_INIT_PASSWORD: '${ADMIN_PASS}'
  #     DOCKER_INFLUXDB_INIT_BUCKET: cadvisor
  #     DOCKER_INFLUXDB_INIT_ORG: monitoring_stack
  #     DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: 1234!12345!66781!
  #     INFLUXDB_USER: root
  #     INFLUXDB_PASS: '${ADMIN_PASS}'
  #   networks:
  #     - container-swarm-network
  #   ports:
  #    - 8086:8086   
  #   volumes:     
  #     - '${container_volumes_location}/influx:/var/lib/influxdb'
  #   deploy: 
  #     replicas: 1      
  #     placement:
  #        constraints:
  #          - node.role == manager

  node-exporter:
    image: flaviostutz/docker-swarm-node-exporter
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    networks:
      - container-swarm-network
    ports:
      - 9100:9100
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.node.rule=Host(`node.${domain_name}`)"
        - "traefik.http.services.node.loadbalancer.server.port=9100" #uses internal docker port
        - "traefik.http.routers.node.entrypoints=websecure"
        - "traefik.http.routers.node.tls=true"
        - "traefik.http.routers.node.tls.certresolver=myresolver"
        - "traefik.http.routers.node.tls.domains[0].main=node.${domain_name}"
        # to add additional DNS names
        # - "traefik.http.routers.node.tls.domains[0].sans=node.${domain_name}"
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  grafana:
    image: grafana/grafana
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`grafana.${domain_name}`)"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000" #uses internal docker port
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.grafana.tls=true"
        - "traefik.http.routers.grafana.tls.certresolver=myresolver"
        - "traefik.http.routers.grafana.tls.domains[0].main=grafana.${domain_name}"
        # to add additional DNS names
        # - "traefik.http.routers.grafana.tls.domains[0].sans=grafana.${domain_name}"
    ports:
      - 3000:3000
    restart: unless-stopped
    networks:
      - container-swarm-network
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${ADMIN_PASS}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    user: "0"
    volumes:
      - '${container_volumes_location}/grafana/datasources:/etc/grafana/provisioning/datasources'
      - '${container_volumes_location}/grafana/data:/var/lib/grafana'
networks:
  container-swarm-network:
    external: true
