version: '3.8'

services:
  traefik:
    image: traefik:v2.11
    command:
      - --log.level=DEBUG # Update log level to DEBUG for more detailed logs
      - --log.filepath=/var/log/traefik/traefik.log # Define log file path
      - --log.level=INFO
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode=true
      - --providers.docker.network=container-swarm-network
      # to use letsencrypt with external DNS (*like cloudflare for example:)

      - "--certificatesresolvers.myresolver.acme.email=test@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesResolvers.myresolver.acme.httpChallenge=true"
      - "--certificatesResolvers.myresolver.acme.httpChallenge.entrypoint=web"
      # - --api=true
      # - --api.insecure=false
      - --api.dashboard=true
    ports:
      - 80:80
      # Listen on port 443, default for HTTPS
      - 443:443
      # # additional ports
      # - "81:8080" # Traefik dashboard, optional
    networks:
      - container-swarm-network
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/var/log/traefik:/var/log/traefik" # Volume for log files
      - ${container_volumes_location}/traefik/letsencrypt:/letsencrypt
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.dashboard.entrypoints=websecure"
        - "traefik.http.routers.dashboard.tls=true"
        - "traefik.http.routers.dashboard.rule=Host(`proxy.${lan_domain_name}`)"
        - "traefik.http.routers.dashboard.service=api@internal"
        - "traefik.http.services.dashboard.loadbalancer.server.port=80" #uses internal docker port
        # Add basic auth middleware
        - traefik.http.routers.dashboard.middlewares=dashboard-auth
        - traefik.http.middlewares.dashboard-auth.basicauth.users=brajam:$$apr1$$0z21agij$$ue5mQ35aU.zi.X7J6dRWq.,shakiata:$$apr1$$ncze1lbu$$kDgBmbBEZK/BWely9tSh0/
  whoami:
    image: traefik/whoami
    networks:
      - container-swarm-network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.whoami.rule=Host(`whoami.${lan_domain_name}`)"
        - "traefik.http.services.whoami.loadbalancer.server.port=2001" #uses internal docker port
        - "traefik.http.routers.whoami.entrypoints=websecure"
        - "traefik.http.routers.whoami.tls=true"
        - "traefik.http.routers.whoami.tls.certresolver=myresolver"
        - "traefik.http.routers.whoami.tls.domains[0].main=whoami.${lan_domain_name}"
        # Add basic auth middleware
        - traefik.http.routers.whoami.middlewares=whoami-auth
        - traefik.http.middlewares.whoami-auth.basicauth.users=brajam:$$apr1$$0z21agij$$ue5mQ35aU.zi.X7J6dRWq.,shakiata:$$apr1$$ncze1lbu$$kDgBmbBEZK/BWely9tSh0/
    command:
      # It tells whoami to start listening on 2001 instead of 80
      - --port=2001
      - --name=iam
networks:
  container-swarm-network:
    external: true
