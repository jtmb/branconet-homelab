- name: Remove Stale Docker Images
  tags:
    - wordpress
  shell: |
    yes | docker image prune -a
    yes | apt --fix-broken install

- name: Remove useless packages from the cache
  apt:
    autoclean: yes

- name: Remove dependencies that are no longer required
  apt:
    autoremove: yes 

- name: Update repositories cache and install packages
  apt:
    name: 
      - net-tools
      - lshw
      - openssh-server
      - fail2ban
      - ufw
      - git
      - cifs-utils
      - psmisc
      - resolvconf
    update_cache: yes
    
# Docker Install (proper way)
- name: Install required system packages for Docker
  apt: name={{ item }} state=latest update_cache=yes
  loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

- name: Add Docker GPG apt Key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker Repository
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu bionic stable
    state: present

- name: Update apt and install docker-ce
  apt: update_cache=yes name=docker-ce state=latest

- name: Install Docker Module for Python
  pip:
    name: docker

- name: Ensure group "docker" exists
  ansible.builtin.group:
    name: docker
    state: present

- name: adding "{{ssh_user}}" to docker group
  user:
    name: "{{ssh_user}}" 
    groups: 
      - docker
      - www-data
    append: yes

# Mount SMB Drives

- name: utility present
  tags: smb
  ansible.builtin.package:
    name: cifs-utils
    state: present
- name: check mountpoint exist
  tags: smb
  ansible.builtin.file:
    path: "/home/ubuntu/container-program-files/plex_smb_share"
    state: directory
    mode: '0755'
    owner: root
    group: root
- name: Mount network share 
  delegate_to: master_node
  tags: smb
  ansible.posix.mount:
    src: "//192.168.0.25/plex_smb_share"
    path: "/home/ubuntu/container-program-files/plex_smb_share"
    fstype: cifs
    opts: 'username={{ user_id }},password={{ ansible_ssh_pass }}'
    state: mounted


# Rejoin Cluser cron on restart
- name: Create startup folder
  ansible.builtin.file:
    path: "/home/ubuntu/cron"
    state: directory
- name: Create startup file
  ansible.builtin.file:
    path: "/home/ubuntu/cron/startup_job.sh"
    state: touch
    mode: u+rw,g-wx,o-rwx
- name: Make Script Executable
  file: dest=/home/ubuntu/cron/startup_job.sh mode=a+x

- name: Write Cron Job for master nodes
  delegate_to: master_node
  lineinfile: 
    dest: "/home/ubuntu/cron/startup_job.sh"
    line: '{{ item }}'
  with_items:
    - 'docker swarm init --force-new-cluster'

- name: Write Cron Job for worker nodes
  delegate_to: worker_node_1
  lineinfile: 
    dest: "/home/ubuntu/cron/startup_job.sh"
    line: '{{ item }}'
  with_items:
    - 'sudo systemctl restart docker'
    - 'sudo mount {{master_node}}:/home/ubuntu/container-program-files /home/ubuntu/container-program-files'
    - 'docker ps'

- name: Create Swarm Crontab entry
  ansible.builtin.cron:
    name: "Swarm job for reboot (rejoin cluster)"
    special_time: reboot
    job: "bash /home/ubuntu/cron/startup_job.sh"

- name: Ensure Host Controllers are not using pihole DNS #(DNS CONTROLLERS SHOULD NEVER POINT DNS TO ITSELF LOL)
  tags: dns
  lineinfile: 
    dest: "/etc/resolvconf/resolv.conf.d/head"
    line: '{{ item }}'
  with_items:
    - 'nameserver 8.8.8.8'
    - 'nameserver 1.1.1.1'
- name: Apply DNS service
  tags: dns
  shell: systemctl enable --now resolvconf.service