- name: create container dirs if they don't exist
  file:
    path: "{{ item }}"
    state: directory
    owner: '{{ssh_user}}' 
    group: 'nogroup'
    mode: 1000 
  with_items: "{{ container_paths }}"

- name: Copy a compose" files from repo to the remote machine to authenticate git repos on host machine
  copy:
    src: "/home/{{user_id}}/repos/{{repo_name}}/docker-compose"
    dest: "/tmp"
- name: Copy Grafana Configs
  copy: remote_src=False src=/home/{{user_id}}/repos/{{repo_name}}/docker-compose/monitoring-stack/grafana/datasource.yml dest={{container_volumes_location}}/grafana/datasources
- name: Copy Prometheus Configs
  copy: remote_src=False src=remote_src=True src=/home/{{user_id}}/repos/{{repo_name}}/docker-compose/monitoring-stack/prometheus/prometheus.yml dest={{container_volumes_location}}/prometheus
- name: Copy loki Configs
  copy: remote_src=False src=/home/{{user_id}}/repos/{{repo_name}}/docker-compose/monitoring-stack/loki/loki-config.yml dest={{container_volumes_location}}/loki/config
- name: Copy MC Configs
  copy: remote_src=False src=/home/{{user_id}}/repos/{{repo_name}}/docker-compose/game-servers/minecraft/ops.json dest={{container_volumes_location}}/mc-server
- name: Change file ownership, group and permissions for configs
  ansible.builtin.file:
    path: "{{item}}"
    state: directory
    owner: '{{ssh_user}}' 
    group: 'nogroup' 
    mode: 1000
    recurse: yes
  with_items: "{{ alt_container_permission_paths }}"

- name: SET ADMIN PASS
  ansible.builtin.debug:
    msg: "{{ansible_ssh_pass}}"
  register: ADMIN_PASS
  no_log: true
- name: DEPLOY CONTAINERS STACK 
  vars:
    env_file: env ADMIN_PASS={{ADMIN_PASS.msg}} master_node={{master_node}} worker_node_1={{worker_node_1}} worker_node_2={{worker_node_2}} container_volumes_location={{container_volumes_location}}
  shell: "{{ item }}"
  with_items: "{{ stack_deploy }}"
  loop_control:
    label: "{{ item | regex_replace('^.*docker stack deploy', 'docker stack deploy') }}" #replaces env secrets from being shown in console output
- name: SCALE SWARM CONTAINERS
  shell: "{{ item }}"
  with_items: "{{ swarm_scale }}"
